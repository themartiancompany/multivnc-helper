#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0-or-later

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
source \
  "${_lib}/libcrash-bash/crash-bash"

# shellcheck disable=SC2034
_global_variables() {
  target_command=""
  target_profile=""
  target_address=""
  target_port=""
  target_password=""
  target_key=""
  target_value=""
  color=""
  quiet=""
}

_requirements() {
  local \
    _app
    _check_cmd \
      'app-installed' \
      'android-utils'
    _app="$( \
      app-installed \
        'com.coboltforge.dontmind.multivnc')"
    if [[ "${_app}" != "true" ]]; then
      _msg_error \
        'MultiVNC not installed.'
    fi
    _check_cmd \
      "sqlite3" \
      "sqlite"
    _check_cmd \
      "su" \
      "tsu"
}

_get_conf_dir_path() {
  local \
    _dir
  _dir="${HOME}/.config/$( \
    _get \
      "app" \
      "name")"
  echo \
    "${_dir}"
}

_multivnc_helper() {
  local \
    _command="${1}" \
    _cmd \
    _args=() \
    _app \
    _db
  _app="com.coboltforge.dontmind.multivnc"
  _db="/data/data/${_app}/databases/VncDatabase"
  if [[ "${_command}" == "get" ]]; then
    _cmd="_${_command}_profile_key_value"
    _args+=(
      "$( \
        _get \
          "target" \
          "profile")"
      "$( \
        _get \
          "target" \
          "key")"
      )
  elif [[ "${_command}" == "set" ]]; then
    _cmd="_${_command}_profile_key_value"
    _args+=(
      "$( \
        _get \
          "target" \
          "profile")"
      "$( \
        _get \
          "target" \
          "key")"
      "$( \
        _get \
          "target" \
          "value")"
    )
  elif [[ "${_command}" == "add" ]]; then
    _cmd="_profile_${_command}"
    _args+=(
      "$( \
        _get \
          "target" \
          "profile")"
      "$( \
        _get \
          "target" \
          "address")"
      "$( \
        _get \
          "target" \
          "port")"
      "$( \
        _get \
          "target" \
          "password")"
    )
  elif [[ "${_command}" == "backup" ]]; then
    _cmd="_db_${_command}"
  elif [[ "${_command}" == "restore" ]]; then
    _cmd="_db_${_command}"
  elif [[ "${_command}" == "dump" ]]; then
    _cmd="_db_${_command}"
  fi
  "${_cmd}" \
    "${_args[@]}"
}

_db_backup() {
  local \
    _cmd=() \
    _dest
  _dest="$( \
    _get_conf_dir_path)"
  _msg_info \
    "backing up to '${_dest}'"
  _cmd=(
    cp
      -a
      "${_db}"
      "${_dest}"
  )
  su \
    -c \
    "${_cmd[*]}"
}

_db_restore() {
  local \
    _cmd=() \
    _src
  _src="$( \
    _get_conf_dir_path)/VncDatabase"
  _msg_info \
    "restoring from '${_src}'"
  _cmd=(
    cp
      -a
      "${_src}"
      "${_db}"
  )
  su \
    -c \
    "${_cmd[*]}"
}

_profile_add() {
  local \
    _profile="${1}" \
    _address="${2}" \
    _port="${3}" \
    _password="${4}" \
    _db_cmd=() \
    _entry=() \
    _opts=() \
    _table
  _table="CONNECTION_BEAN"
  _opts=(
    "tight"
    "zrle"
    "ultra"
    "copyrect"
    "hextile"
    "zlib"
    "corre"
    "rre"
    "trle"
    "zywrle"
    "raw"
  )
  _entry=(
    100
    "'${_profile}'"
    "'${_address}'"
    "${_port}"
    "'${_password}'"
    "'${_opts[*]}'"
    "'L6'" # Compression
    "'L5'" # Quality
    "'C24bit'" # Colors
    0
    "''"
    NULL
    NULL
    1
    1
    1
    0
    1
    0
    0
    "''"
    NULL
    0
    NULL
    NULL
    NULL
    NULL
    NULL
    NULL
  )
  _db_cmd=(
    "INSERT"
     "INTO"
     "CONNECTION_BEAN"
     "VALUES($( \
       IFS=","; \
       echo \
         "${_entry[*]}"));"
  )
  _flush_table \
    "${_db}" \
    "${_table}"
  _cmd=(
    sqlite3
      "${_db}"
      "\"${_db_cmd[*]}\""
  )
  _msg_info \
    "Running ${_cmd[*]}"
  su \
    -c \
    "${_cmd[*]}" 1&>/dev/null
  _account="$( \
    _db_dump | \
      grep \
        "'${_profile}'")"
  _msg_info \
    "Account: ${_account}"
  echo \
    hijess
}

_db_dump(){
  local \
    _cmd=()
  _cmd=(
    sqlite3
      "${_db}"
      ".dump"
  )
  su \
    -c \
    "${_cmd[*]}"
}

# Set key for a profile
_set_profile_key_value() {
  local \
    _profile="${1}" \
    _key="${2}" \
    _value="${3}" \
    _table="CONNECTION_BEAN" \
    _db_cmd \
    _cmd=() \
    _account \
    _repl \
    _id
  _msg_info \
    "Setting value ${_value} for key ${_key} of profile '${_profile}'"
  _repl="${_value}"
  _account="$( \
    _db_dump | \
      grep \
        "'${_profile}'")"
  if [[ "${_account}" != "" ]]; then
    _pattern="$( \
      _get_profile_key_value \
        "${_profile}" \
        "${_key}")"
    _id="$( \
      _get_profile_key_value \
        "${_profile}" \
        "id")"
    _msg_info \
      "account id ${_id}"
    if [[ "${_key}" == "password" ]]; then
      _repl="'${_value}'"
    fi
    if [[ "${_pattern}" != "" ]]; then
      # _new_id="$((_id + 100))"
      _new_id="$((1))"
      _db_cmd="$( \
        echo \
          "${_account}" | \
          sed \
            "s/${_pattern}/${_repl}/" | \
            sed \
              "s/${_id},/${_new_id},/")"
    fi
  fi
  if [[ "${_db_cmd}" != "" ]]; then
    _flush_table \
      "${_db}" \
      "${_table}"
    _cmd=(
      sqlite3
        "${_db}"
        "\"${_db_cmd}\""
    )
    _msg_info \
      "Running ${_cmd[*]}"
    su \
      -c \
      "${_cmd[*]}" 1&>/dev/null
  fi
  _account="$( \
    _db_dump | \
      grep \
        "'${_profile}'")"
  _msg_info \
    "Account: ${_account}"
}

_flush_table() {
  local \
    _db="${1}" \
    _table="${2}" \
    _delete \
    _delete_1 \
    _delete_2
  _msg_info \
    "flushing table ${_table} in db '${_db}'"
  _delete_1="Delete from ${_table};"
  _delete_2="DELETE FROM SQLITE_SEQUENCE WHERE name='${_table}';"
  _delete="DELETE FROM ${_table};"
  _cmd=(
    sqlite3
      "${_db}"
      "'${_delete}'"
  )
  su \
    -c \
    "${_cmd[*]}"
}

_account_key() {
  local \
    _account="${1}" \
    _position="${2}" 
  echo \
    "${_account}" | \
    awk \
      -F \
        "(" \
      '{print $2}' | \
      awk \
        -F \
          "," \
        '{print $'"${_position}"'}'
}

# Get MultiVNC settings key
# $1: target settings key
_get_profile_key_value() {
  local \
    _profile="${1}" \
    _key="${2}" \
    _msg=() \
    _account
  _account="$( \
    _db_dump | \
      grep \
        "'${_profile}'")"
  if [[ "${_key}" == "id" ]]; then
    _position=1
  elif [[ "${_key}" == "host" ]]; then
    _position=3
  elif [[ "${_key}" == "port" ]]; then
    _position=4
  elif [[ "${_key}" == "password" ]]; then
    _position=5
  fi
  _account_key \
    "${_account}" \
    "${_position}"
}

_set_overrides() {
  _set_override \
    "target" \
    "address" \
    "localhost"
  _set_override \
    "target" \
    "port" \
    "59001"
  _set_override \
    "target" \
    "password" \
    ""
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true
Get or set MultiVNC settings
usage:
  $(_get "app" "name")
    [options]
    <command>
    <profile>
    <key>
    (<value>)
  commands:
     add                  Set new profile
       <profile>
     get                  Get configuration value
       <key>
     set                  Set configuration value
       <key>
       <value>
     backup               Backup original database
     restore              Restore original database
  options:
     -a <address>         Address for the new profile.
     -p <port>            Port for the new profile.
     -k <password>        Password for the new profile.
     -h                   This message.
     -c                   Enable color output
     -v                   Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_display_flags() {
  local \
    _flags=(
      "${1}"
    ) \
    _flag
  for _flag \
    in "${_flags[@]}"; do
  _msg_info \
    "                             ${_flag}"
  done
}

# Shows configuration options.
_show_config() {
  local \
    _get_date
  TZ=UTC \
    printf \
      -v _get_date \
      '%(%FT%R%z)T' \
      "${SOURCE_DATE_EPOCH}"
  _msg_info "${app_name} configuration"
  _msg_info "           Operation date:   $(_get "_get" "date")"
  _msg_info "           Target command:   $(_get "target" "command")"
  _msg_info "           Target profile:   $(_get "target" "profile")"
  _msg_info "           Target address:   $(_get "target" "address")"
  _msg_info "              Target port:   $(_get "target" "port")"
  _msg_info "          Target password:   $(_get "target" "password")"
  _msg_info "               Target key:   $(_get "target" "key")"
  _msg_info "             Target value:   $(_get "target" "value")"
}

_globals
_global_variables
_requirements
_config_user_init \
  "$(_get \
       "app" \
       "name")"
# shellcheck disable=SC2034
while \
  getopts \
    'a:p:k:cvh?' \
    arg; do
  case \
    "${arg}" in
    a) override_target_address="${OPTARG}" ;;
    p) override_target_port="${OPTARG}" ;;
    k) override_target_password="${OPTARG}" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
         _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
if (( $# < 1 )); then
  _msg_error \
    "no command given" \
    0
  _set_overrides
  _usage \
    1
fi
_set \
  "target" \
  "command" \
  "${1}"
if (( 1 < $# )); then
  _set \
    "target" \
    "profile" \
    "${2}"
fi
if (( 2 < $# )); then
  _set \
    "target" \
    "key" \
    "${3}"
fi
if (( 3 < $# )); then
  _set \
    "target" \
    "value" \
    "${4}"
fi
_set_overrides
_config_user_init \
  "$( \
    _get \
      "app" \
      "name")"
_show_config
app_opts=(
  "$( \
    _get \
      "target" \
      "command")"
)
_multivnc_helper \
  "${app_opts[@]}"

# vim:set sw=2 sts=-1 et:
